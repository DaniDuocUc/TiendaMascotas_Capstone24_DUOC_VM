stages:
  - stage: Build
    displayName: Build and push stage
    pool:
      name: 'Azure Pipelines'
    variables:
      - template: ../vars.yml
      - name: prefix
        value: ''
      - name: sufix
        value: ''
      - name: buildId
        value: '$(Build.BuildNumber)'
      - name: prod-version
        value: '$(major).$(minor).' 

    jobs:
      - job: Variables
        displayName: Set variables
        pool:
          name: 'Azure Pipelines'
        steps:
          - task: Bash@3
            condition: eq(variables['Build.SourceBranchName'], 'qa')
            displayName: QA Tag
            name: SetQASufix
            inputs:
              targetType: 'inline'
              script: |
                echo "##vso[task.setvariable variable=sufix;isOutput=true]-qa"
          - task: Bash@3
            condition: eq(variables['Build.SourceBranchName'], 'main')
            displayName: Prod Tag
            name: SetProdVersion
            inputs:
              targetType: 'inline'
              script: |
                echo "##vso[task.setvariable variable=prefix;isOutput=true]$(prod-version)"

      - job: Build
        displayName: Build and Push
        dependsOn: Variables
        variables:
          prefix: $[dependencies.Variables.outputs['SetProdVersion.prefix']]
          sufix: $[dependencies.Variables.outputs['SetQASufix.sufix']]
        pool:
          name: 'Azure Pipelines'
        steps:
          - task: Docker@2
            displayName: Build Docker image
            inputs:
              command: build
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              arguments: --build-arg build_env=$(build_env)
              tags: |
                latest
                $(prefix)$(buildId)$(sufix)

          - task: Docker@2
            displayName: Push Docker image
            inputs:
              command: 'push'
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                latest
                $(prefix)$(buildId)$(sufix)
